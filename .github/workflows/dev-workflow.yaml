name: helm-dev-ci-workflow

on:
  push:
    branches:
      - feature/*
      - hotfix/*

env:
  HELM_REPO: https://bin.cloud.barco.com/artifactory/helm-enp

jobs:
  setup-infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup helm
        uses: azure/setup-helm@v3

      - name: Setup Helm Repo
        shell: bash
        run: |
          helm repo add barco https://bin.cloud.barco.com/artifactory/helm-enp --username=$ARTIFACTORY_USER --password=$ARTIFACTORY_PWD
        env:
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PWD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      
      - name: Get list of charts in Artifactory and helm-enp-charts directory
        shell: bash
        run: |
          function generateList() {
              CHART_LIST=(`find ../helm-enp-charts/ -name Chart.yaml  |cut -f 3 -d "/"`)
              for CHART in "${CHART_LIST[@]}"
              do
                  CHART_VERSION=`grep ^version ../helm-enp-charts/$CHART/Chart.yaml | cut -f 2 -d " "`
                  echo "${CHART}:${CHART_VERSION}"
              done
          }

          # Get list of charts in helm-enp-charts Git repo
          generateList | sort > stashcharts.list

          # Get list of charts in Artifactory Helm Repo
          helm search repo barco/ | awk '{print $1":"$2}' | grep -v NAME | sed "s/barco\///g" | sed 's/[[:blank:]]*$//' | sed "s/\s\+/:/g" | sort > artifactory.list
          
          # Remove garbage from artifactory list if exists
          sed -i '/No:results:found/d' artifactory.list

      - name: Verify that both lists are non-empty
        shell: bash
        run: |
          if [[ -s stashcharts.list ]]; then
              echo "stashcharts.list not empty"
          else
              printf "\nERROR: list of charts defined in Stash/Git (stashcharts.list) is empty. Exiting..\n\n"
              exit 1
          fi

          if [[ -s artifactory.list ]]; then
              echo "artifactory.list not empty"
          else
              printf "\nERROR: list of charts in Artifactory (artifactory.list) is empty. Exiting..\n\n"
              exit 1
          fi
      
      - name: Cat both lists
        shell: bash
        run: |
          echo "Artifactory List"
          cat artifactory.list
          echo
          echo "Stashchart List"
          cat stashcharts.list
          echo
        
      - name: Upload Artifactory list
        uses: actions/upload-artifact@v3
        with:
          name: output-artifactory-list
          path: artifactory.list

      - name: Upload Stashcharts list
        uses: actions/upload-artifact@v3
        with:
          name: output-stashcharts-list
          path: stashcharts.list

  helm-package:
    runs-on: ubuntu-latest
    needs: [setup-infra]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update Secrets in Helm values.yaml file
        uses: microsoft/variable-substitution@v1 
        with:
          files: 'cheeseshop-chart/values.yaml'
        env:
          artifactoryAuth: ${{ secrets.ARTIFACTORY_AUTH }}

      - name: Download Artifactory List
        uses: actions/download-artifact@v3
        with:
          name: output-artifactory-list

      - name: Download Stashcharts List
        uses: actions/download-artifact@v3
        with:
          name: output-stashcharts-list

      - name: Cat both lists
        shell: bash
        run: |
          echo "Artifactory List"
          cat artifactory.list
          echo
          echo "Stashchart List"
          cat stashcharts.list
          echo

      - name: Create Helm Packages
        shell: bash
        run: |
          while read CHART; do
            echo "nothing to do"
            GIT_CHART_NAME=`echo $CHART | cut -f 1 -d ":"`
            GIT_CHART_VERSION=`echo $CHART | cut -f 2 -d ":"`
            ART_CHART_NAME=$GIT_CHART_NAME
            # ART_CHART_VERSION=`grep "^${ART_CHART_NAME}:" artifactory.list | cut -f 2 -d ":" `

            echo "$GIT_CHART_NAME, $GIT_CHART_VERSION, $ART_CHART_NAME"

            # # if there is no chart in Artifactory, assume 0.0.0 version
            # if [ -z "$ART_CHART_VERSION" ]; then
            #     ART_CHART_VERSION="0.0.0"
            # fi

            # # Build dependencies first if needed
            # if [ -f $GIT_CHART_NAME/requirements.yaml ] || [ -f $GIT_CHART_NAME/Chart.lock ]; then
            #     echo "Building Helm dependency...."
            #     helm dep build $GIT_CHART_NAME
            # fi

            # # Create helm package
            # echo "Creating Helm package...."
            # helm package $GIT_CHART_NAME

            # # Upload to Artifactory
            # printf "\nUploading to Artifactory\n"

            # # (artifactory user is hardcoded intentionally)
            # curl --silent --show-error --fail -u ${ARTIFACTORYUSER} \
            #     -T "${GIT_CHART_NAME}-${GIT_CHART_VERSION}.tgz" \
            #     "${HELM_REPO}/${GIT_CHART_NAME}-${GIT_CHART_VERSION}.tgz"

            # res=$?

            # if test "$res" != "0"; then
            #     echo "the curl command failed with: $res"
            #     echo "New **Helm** chart CURL upload failed: **${GIT_CHART_NAME}:${GIT_CHART_VERSION}** reason: ${res}"
            #     exit 1
            # fi

            # echo "New **Helm** chart was released: **${GIT_CHART_NAME}:${GIT_CHART_VERSION}** & uploaded to Artifactory"

            # # Create a tag
            # # cd ../helm-enp-charts
            # pwd
            # git tag "${GIT_CHART_NAME}/${GIT_CHART_VERSION}" || true
            # cd -
          done < stashcharts.list

    